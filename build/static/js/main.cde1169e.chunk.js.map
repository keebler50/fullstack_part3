{"version":3,"sources":["components/Filter.js","components/Person.js","components/Persons.js","components/PersonForm.js","services/PersonService.js","components/Notification.js","components/App.js","index.js"],"names":["Filter","filter","handleFilterChange","onChange","Person","person","handlePersonDelete","key","id","name","number","onClick","Persons","persons","rows","toLowerCase","indexOf","map","PersonForm","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","value","type","baseUrl","axios","get","then","response","data","personObject","post","delete","put","Notification","message","className","App","useState","setPersons","setNewName","setNewNumber","setFilter","class","notification","setNotification","useEffect","PersonService","initialPersons","event","target","preventDefault","p","length","alert","existingPerson","find","window","confirm","updatedPerson","setTimeout","catch","error","returnedPerson","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cde1169e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = ({filter, handleFilterChange}) => {\r\n\r\n    return (\r\n        <div>filter shown with <input\r\n            filter={filter} \r\n            onChange={handleFilterChange} /></div>\r\n    )\r\n}\r\n\r\nexport default Filter","import React from 'react'\n\nconst Person = (person, handlePersonDelete) => {\n    return (\n        <div key={person.id}>{person.name} {person.number} <button onClick={() => handlePersonDelete(person)}>delete</button></div>\n    )\n}\n\nexport default Person","import React from 'react'\nimport Person from './Person'\n\nconst Persons = ({ persons, filter, handlePersonDelete }) => {\n    const rows = persons\n        .filter(person => person.name.toLowerCase().indexOf(filter.toLowerCase()) !== -1)\n        .map((person) => Person(person, handlePersonDelete))\n\n    return (\n        <>\n            {rows}\n        </>\n    )\n}\n\nexport default Persons","import React from 'react'\n\nconst PersonForm = ({addPerson, newName, handleNameChange, newNumber, handleNumberChange}) => {\n    return (\n        <form onSubmit={addPerson}>\n            <div>\n                name: <input\n                    value={newName}\n                    onChange={handleNameChange}\n                />\n            </div>\n            <div>\n                number: <input\n                    value={newNumber}\n                    onChange={handleNumberChange}\n                />\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n}\n\nexport default PersonForm","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    return axios\r\n        .get(baseUrl)\r\n        .then(response => response.data)\r\n}\r\n\r\nconst create = personObject => {\r\n    return axios\r\n        .post(baseUrl, personObject)\r\n        .then(response => response.data)\r\n}\r\n\r\nconst remove = id => {\r\n    return axios\r\n        .delete(baseUrl + `/${id}`)\r\n}\r\n\r\nconst update = personObject => {\r\n    return axios\r\n        .put(baseUrl + `/${personObject.id}`, personObject)\r\n        .then(response => response.data)\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    create,\r\n    remove,\r\n    update\r\n}","import React from 'react'\r\n\r\nconst Notification = ({ message, className }) => {\r\n    if (!message) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className={className}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\r\nimport Filter from './Filter'\r\nimport Persons from './Persons'\r\nimport PersonForm from './PersonForm'\r\nimport PersonService from '../services/PersonService'\r\nimport Notification from './Notification'\r\n\r\nconst App = () => {\r\n    const [persons, setPersons] = useState([])\r\n    const [newName, setNewName] = useState('')\r\n    const [newNumber, setNewNumber] = useState('')\r\n    const [filter, setFilter] = useState('')\r\n    const [notification, setNotification] = useState({ message: null, class: null })\r\n\r\n    const handleNameChange = (event) => {\r\n        setNewName(event.target.value)\r\n    }\r\n\r\n    const handleNumberChange = (event) => {\r\n        setNewNumber(event.target.value)\r\n    }\r\n\r\n    const handleFilterChange = (event) => {\r\n        setFilter(event.target.value)\r\n    }\r\n\r\n    const handlePersonDelete = (person) => {\r\n        if (window.confirm(`Delete ${person.name} ?`)) {\r\n            PersonService\r\n                .remove(person.id)\r\n                .then(() => setPersons(persons.filter(p => p.id !== person.id)))\r\n        }\r\n    }\r\n\r\n    const addPerson = (event) => {\r\n        event.preventDefault()\r\n\r\n        // look for dupes\r\n        if (persons.filter(p => p.name === newName && p.number === newNumber).length > 0) {\r\n            alert(`${newName} is already added to phonebook`)\r\n            return\r\n        }\r\n\r\n        const existingPerson = persons.find(p => p.name === newName)\r\n\r\n        if (existingPerson) {\r\n            if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\r\n                PersonService\r\n                    .update({ ...existingPerson, number: newNumber })\r\n                    .then(updatedPerson => {\r\n                        setNotification({\r\n                            message: `Updated ${updatedPerson.name}`,\r\n                            class: 'notification'\r\n                        })\r\n                        setTimeout(() => {\r\n                            setNotification({\r\n                                message: null, class: null\r\n                            })\r\n                        }, 5000)\r\n                        setPersons(persons.map(person => person.id !== existingPerson.id ? person : updatedPerson))\r\n                        setNewName('')\r\n                        setNewNumber('')\r\n                    })\r\n                    .catch(error => {\r\n                        setNotification({\r\n                            message: `Information of ${existingPerson.name} has already been removed from server`, class: 'error'\r\n                        })\r\n                        setTimeout(() => {\r\n                            setNotification({ message: null, class: null })\r\n                        }, 5000)\r\n                    })\r\n                return\r\n            }\r\n            return\r\n        }\r\n\r\n        const personObject = {\r\n            id: null,\r\n            name: newName,\r\n            number: newNumber\r\n        }\r\n\r\n        PersonService\r\n            .create(personObject)\r\n            .then(returnedPerson => {\r\n                setNotification({\r\n                    message: `Added ${returnedPerson.name}`,\r\n                    class: 'notification'\r\n                })\r\n                setTimeout(() => {\r\n                    setNotification({\r\n                        message: null,\r\n                        class: null\r\n                    })\r\n                }, 5000)\r\n                setPersons(persons.concat(returnedPerson))\r\n                setNewName('')\r\n                setNewNumber('')\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        PersonService.getAll().then((initialPersons) => {\r\n            setPersons(initialPersons)\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <h2>Phonebook</h2>\r\n\r\n            <Notification className={notification.class} message={notification.message} />\r\n\r\n            <Filter filter={filter} handleFilterChange={handleFilterChange} />\r\n            <h2>add a new</h2>\r\n            <PersonForm addPerson={addPerson} newName={newName} handleNameChange={handleNameChange} newNumber={newNumber} handleNumberChange={handleNumberChange} />\r\n            <h2>Numbers</h2>\r\n            <Persons persons={persons} filter={filter} handlePersonDelete={handlePersonDelete} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './components/App'\r\n\r\nimport './index.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}